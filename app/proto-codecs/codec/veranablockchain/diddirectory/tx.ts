// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: veranablockchain/diddirectory/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";

export const protobufPackage = "veranablockchain.diddirectory";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgAddDID defines the Msg/AddDID request type */
export interface MsgAddDID {
  creator: string;
  did: string;
  years: number;
}

/** MsgAddDIDResponse defines the Msg/AddDID response type */
export interface MsgAddDIDResponse {
}

/** MsgRenewDID defines the Msg/RenewDID request type */
export interface MsgRenewDID {
  creator: string;
  did: string;
  years: number;
}

/** MsgRenewDIDResponse defines the Msg/RenewDID response type */
export interface MsgRenewDIDResponse {
}

/** MsgRemoveDID defines the Msg/RemoveDID request type */
export interface MsgRemoveDID {
  creator: string;
  did: string;
}

/** MsgRemoveDIDResponse defines the Msg/RemoveDID response type */
export interface MsgRemoveDIDResponse {
}

/** MsgTouchDID defines the Msg/TouchDID request type */
export interface MsgTouchDID {
  creator: string;
  did: string;
}

/** MsgTouchDIDResponse defines the Msg/TouchDID response type */
export interface MsgTouchDIDResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgAddDID(): MsgAddDID {
  return { creator: "", did: "", years: 0 };
}

export const MsgAddDID = {
  encode(message: MsgAddDID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    if (message.years !== 0) {
      writer.uint32(24).uint32(message.years);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddDID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddDID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.years = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddDID {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      years: isSet(object.years) ? globalThis.Number(object.years) : 0,
    };
  },

  toJSON(message: MsgAddDID): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.years !== 0) {
      obj.years = Math.round(message.years);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddDID>, I>>(base?: I): MsgAddDID {
    return MsgAddDID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddDID>, I>>(object: I): MsgAddDID {
    const message = createBaseMsgAddDID();
    message.creator = object.creator ?? "";
    message.did = object.did ?? "";
    message.years = object.years ?? 0;
    return message;
  },
};

function createBaseMsgAddDIDResponse(): MsgAddDIDResponse {
  return {};
}

export const MsgAddDIDResponse = {
  encode(_: MsgAddDIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddDIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddDIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddDIDResponse {
    return {};
  },

  toJSON(_: MsgAddDIDResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddDIDResponse>, I>>(base?: I): MsgAddDIDResponse {
    return MsgAddDIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddDIDResponse>, I>>(_: I): MsgAddDIDResponse {
    const message = createBaseMsgAddDIDResponse();
    return message;
  },
};

function createBaseMsgRenewDID(): MsgRenewDID {
  return { creator: "", did: "", years: 0 };
}

export const MsgRenewDID = {
  encode(message: MsgRenewDID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    if (message.years !== 0) {
      writer.uint32(24).uint32(message.years);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRenewDID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRenewDID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.years = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRenewDID {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      years: isSet(object.years) ? globalThis.Number(object.years) : 0,
    };
  },

  toJSON(message: MsgRenewDID): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.years !== 0) {
      obj.years = Math.round(message.years);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRenewDID>, I>>(base?: I): MsgRenewDID {
    return MsgRenewDID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRenewDID>, I>>(object: I): MsgRenewDID {
    const message = createBaseMsgRenewDID();
    message.creator = object.creator ?? "";
    message.did = object.did ?? "";
    message.years = object.years ?? 0;
    return message;
  },
};

function createBaseMsgRenewDIDResponse(): MsgRenewDIDResponse {
  return {};
}

export const MsgRenewDIDResponse = {
  encode(_: MsgRenewDIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRenewDIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRenewDIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRenewDIDResponse {
    return {};
  },

  toJSON(_: MsgRenewDIDResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRenewDIDResponse>, I>>(base?: I): MsgRenewDIDResponse {
    return MsgRenewDIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRenewDIDResponse>, I>>(_: I): MsgRenewDIDResponse {
    const message = createBaseMsgRenewDIDResponse();
    return message;
  },
};

function createBaseMsgRemoveDID(): MsgRemoveDID {
  return { creator: "", did: "" };
}

export const MsgRemoveDID = {
  encode(message: MsgRemoveDID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveDID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveDID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveDID {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
    };
  },

  toJSON(message: MsgRemoveDID): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveDID>, I>>(base?: I): MsgRemoveDID {
    return MsgRemoveDID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveDID>, I>>(object: I): MsgRemoveDID {
    const message = createBaseMsgRemoveDID();
    message.creator = object.creator ?? "";
    message.did = object.did ?? "";
    return message;
  },
};

function createBaseMsgRemoveDIDResponse(): MsgRemoveDIDResponse {
  return {};
}

export const MsgRemoveDIDResponse = {
  encode(_: MsgRemoveDIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveDIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveDIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveDIDResponse {
    return {};
  },

  toJSON(_: MsgRemoveDIDResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveDIDResponse>, I>>(base?: I): MsgRemoveDIDResponse {
    return MsgRemoveDIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveDIDResponse>, I>>(_: I): MsgRemoveDIDResponse {
    const message = createBaseMsgRemoveDIDResponse();
    return message;
  },
};

function createBaseMsgTouchDID(): MsgTouchDID {
  return { creator: "", did: "" };
}

export const MsgTouchDID = {
  encode(message: MsgTouchDID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgTouchDID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgTouchDID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgTouchDID {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
    };
  },

  toJSON(message: MsgTouchDID): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgTouchDID>, I>>(base?: I): MsgTouchDID {
    return MsgTouchDID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgTouchDID>, I>>(object: I): MsgTouchDID {
    const message = createBaseMsgTouchDID();
    message.creator = object.creator ?? "";
    message.did = object.did ?? "";
    return message;
  },
};

function createBaseMsgTouchDIDResponse(): MsgTouchDIDResponse {
  return {};
}

export const MsgTouchDIDResponse = {
  encode(_: MsgTouchDIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgTouchDIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgTouchDIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgTouchDIDResponse {
    return {};
  },

  toJSON(_: MsgTouchDIDResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgTouchDIDResponse>, I>>(base?: I): MsgTouchDIDResponse {
    return MsgTouchDIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgTouchDIDResponse>, I>>(_: I): MsgTouchDIDResponse {
    const message = createBaseMsgTouchDIDResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  AddDID(request: MsgAddDID): Promise<MsgAddDIDResponse>;
  RenewDID(request: MsgRenewDID): Promise<MsgRenewDIDResponse>;
  RemoveDID(request: MsgRemoveDID): Promise<MsgRemoveDIDResponse>;
  TouchDID(request: MsgTouchDID): Promise<MsgTouchDIDResponse>;
}

export const MsgServiceName = "veranablockchain.diddirectory.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.AddDID = this.AddDID.bind(this);
    this.RenewDID = this.RenewDID.bind(this);
    this.RemoveDID = this.RemoveDID.bind(this);
    this.TouchDID = this.TouchDID.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }

  AddDID(request: MsgAddDID): Promise<MsgAddDIDResponse> {
    const data = MsgAddDID.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddDID", data);
    return promise.then((data) => MsgAddDIDResponse.decode(_m0.Reader.create(data)));
  }

  RenewDID(request: MsgRenewDID): Promise<MsgRenewDIDResponse> {
    const data = MsgRenewDID.encode(request).finish();
    const promise = this.rpc.request(this.service, "RenewDID", data);
    return promise.then((data) => MsgRenewDIDResponse.decode(_m0.Reader.create(data)));
  }

  RemoveDID(request: MsgRemoveDID): Promise<MsgRemoveDIDResponse> {
    const data = MsgRemoveDID.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveDID", data);
    return promise.then((data) => MsgRemoveDIDResponse.decode(_m0.Reader.create(data)));
  }

  TouchDID(request: MsgTouchDID): Promise<MsgTouchDIDResponse> {
    const data = MsgTouchDID.encode(request).finish();
    const promise = this.rpc.request(this.service, "TouchDID", data);
    return promise.then((data) => MsgTouchDIDResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
